generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String           @id @default(uuid()) 
  email        String           @unique
  passwordHash String
  name         String
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  budgets      Budget[]
  expenses     Expense[]
  incomes      Income[]
  savingsGoals SavingsGoal[]
  security     Security?
  transactions Transaction[]
  preferences  UserPreferences?
}

model Session {
  id        String   @id @default(uuid())
  sid       String   @unique
  data      String
  expiresAt DateTime
}

model UserPreferences {
  id       String  @id @default(uuid()) 
  currency String
  language String
  timezone String
  theme    String  @default("light")
  userId   String? @unique
  user     User?   @relation(fields: [userId], references: [id])
}

model Expense {
  id          String   @id @default(uuid()) 
  amount      Float
  category    String
  description String?
  date        DateTime
  tags        String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String   
  user        User     @relation(fields: [userId], references: [id])
}

model Income {
  id          String   @id @default(uuid()) 
  amount      Float
  source      String
  date        DateTime
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String   
  user        User     @relation(fields: [userId], references: [id])
}

model Budget {
  id        String       @id @default(uuid()) 
  category  String
  amount    Float
  startDate DateTime
  endDate   DateTime
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  status    BudgetStatus
  userId    String       
  user      User         @relation(fields: [userId], references: [id])
}

model Transaction {
  id          String          @id @default(uuid()) 
  amount      Float
  type        TransactionType
  category    String
  description String?
  date        DateTime
  tags        String[]
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  userId      String          
  user        User            @relation(fields: [userId], references: [id])
}

model SavingsGoal {
  id            String            @id @default(uuid()) 
  targetAmount  Float
  currentAmount Float
  description   String
  deadline      DateTime
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  status        SavingsGoalStatus
  userId        String            
  user          User              @relation(fields: [userId], references: [id])
}

model Security {
  id                   String    @id @default(uuid()) 
  resetToken           String?
  resetTokenExpiration DateTime?
  twoFactorEnabled     Boolean   @default(false)
  twoFactorSecret      String?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  userId               String    @unique 
  user                 User      @relation(fields: [userId], references: [id])
}

enum BudgetStatus {
  active
  inactive
}

enum TransactionType {
  expense
  income
}

enum SavingsGoalStatus {
  active
  completed
  expired
}